"""
Plant Manager - Handles plant inventory and availability
Improved version with dynamic slot count
"""

import json
import os
from config import SEED_SLOTS, PLANT_COSTS

class PlantManager:
    def __init__(self):
        self.plants = {}  # {plant_name: {"slot": slot_num, "coord": (x,y)}}
        self.config_file = "plant_config.json"
        self.slot_count = 6  # Default slot count
    
    def setup_interactive(self):
        """Interactive setup for plant configuration"""
        print("\n" + "="*60)
        print("üå± –ù–ê–°–¢–†–û–ô–ö–ê –†–ê–°–¢–ï–ù–ò–ô")
        print("="*60)
        
        # Ask for number of slots
        while True:
            try:
                slot_input = input(f"\n–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π? (1-10, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6): ").strip()
                if slot_input == "":
                    self.slot_count = 6
                    break
                slot_count = int(slot_input)
                if 1 <= slot_count <= 10:
                    self.slot_count = slot_count
                    break
                else:
                    print("  ‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
            except ValueError:
                print("  ‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        
        print(f"\n‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {self.slot_count}")
        
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")
        print("  1. Sunflower      (50 sun)")
        print("  2. Peashooter     (100 sun)")
        print("  3. Snow Pea       (175 sun)")
        print("  4. Repeater       (200 sun)")
        print("  5. Cherry Bomb    (150 sun)")
        print("  6. Wall-nut       (50 sun)")
        print("  7. Tall-nut       (125 sun)")
        print("  8. Potato Mine    (25 sun)")
        print("  9. Squash         (50 sun)")
        print(" 10. Chomper        (150 sun)")
        print(" 11. Spikeweed      (100 sun)")
        print(" 12. Jalapeno       (125 sun)")
        print(" 13. Torchwood      (175 sun)")
        print("  0. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ—Ç (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)")
        print()
        
        plant_names = {
            1: "sunflower",
            2: "peashooter",
            3: "snow pea",
            4: "repeater",
            5: "cherry bomb",
            6: "wall-nut",
            7: "tall-nut",
            8: "potato mine",
            9: "squash",
            10: "chomper",
            11: "spikeweed",
            12: "jalapeno",
            13: "torchwood",
        }
        
        for slot_num in range(1, self.slot_count + 1):
            if slot_num not in SEED_SLOTS:
                print(f"‚ö†Ô∏è –°–ª–æ—Ç {slot_num} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.py, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                break
                
            while True:
                try:
                    coord = SEED_SLOTS[slot_num]
                    user_input = input(f"–°–ª–æ—Ç {slot_num} ({coord}): ").strip()
                    
                    if user_input == "0" or user_input == "":
                        print(f"  ‚äò –°–ª–æ—Ç {slot_num} –ø—Ä–æ–ø—É—â–µ–Ω\n")
                        break
                    
                    choice = int(user_input)
                    
                    if choice in plant_names:
                        plant_name = plant_names[choice]
                        
                        # Check if plant already assigned
                        if plant_name in self.plants:
                            print(f"  ‚ö†Ô∏è {plant_name} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Å–ª–æ—Ç {self.plants[plant_name]['slot']}")
                            continue
                        
                        self.plants[plant_name] = {
                            "slot": slot_num,
                            "coord": coord
                        }
                        
                        print(f"  ‚úÖ {plant_name} –≤ —Å–ª–æ—Ç–µ {slot_num}\n")
                        break
                    else:
                        print("  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
                
                except ValueError:
                    print("  ‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        self.save_config()
        self.print_summary()
    
    def save_config(self):
        """Save plant configuration to file"""
        try:
            config_data = {
                "slot_count": self.slot_count,
                "plants": self.plants
            }
            with open(self.config_file, "w", encoding="utf-8") as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.config_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")
    
    def load_config(self):
        """Load plant configuration from file"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, "r", encoding="utf-8") as f:
                    config_data = json.load(f)
                
                # Handle old format (direct plants dict)
                if "plants" in config_data:
                    self.slot_count = config_data.get("slot_count", 6)
                    self.plants = config_data["plants"]
                else:
                    # Old format compatibility
                    self.plants = config_data
                    self.slot_count = len(self.plants)
                
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_file}")
                self.print_summary()
                return True
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {e}")
        return False
    
    def print_summary(self):
        """Print current plant configuration"""
        print("\n" + "="*60)
        print("üìã –¢–ï–ö–£–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø")
        print("="*60)
        print(f"–°–ª–æ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {self.slot_count}")
        
        if not self.plants:
            print("‚ö†Ô∏è –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π")
            return
        
        print("\nüü¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")
        for name, data in sorted(self.plants.items(), key=lambda x: x[1]["slot"]):
            slot = data["slot"]
            coord = data["coord"]
            cost = PLANT_COSTS.get(name, "?")
            print(f"  ‚úÖ –°–ª–æ—Ç {slot}: {name:15} | {coord} | {cost} sun")
        
        print("="*60 + "\n")
    
    def get_plant(self, plant_name):
        """Get plant data if it exists"""
        if plant_name in self.plants:
            return self.plants[plant_name]
        return None
    
    def get_all_available(self):
        """Get list of all available plants"""
        return list(self.plants.keys())
    
    def has_plant(self, plant_name):
        """Check if plant is available"""
        return plant_name in self.plants


if __name__ == "__main__":
    manager = PlantManager()
    
    print("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ù–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é")
    
    choice = input("\n–í—ã–±–æ—Ä (1/2): ").strip()
    
    if choice == "2" and manager.load_config():
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    else:
        manager.setup_interactive()
